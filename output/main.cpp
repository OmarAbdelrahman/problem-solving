/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author omar-abdelrahman
 */

#include <bits/stdc++.h>
#include "iostream"
#include "vector"

template<typename U, typename V>
std::istream& operator >> (std::istream& in, std::pair<U, V>& p) {
  return in >> p.first >> p.second;
}

template<typename U, typename V>
std::ostream& operator << (std::ostream& out, const std::pair<U, V>& p) {
  return out << p.first << ' ' << p.second;
}

template<typename T>
std::istream& operator >> (std::istream& in, std::vector<T>& v) {
  for (auto& vi : v) in >> vi;
  return in;
}

template<typename T>
std::ostream& operator << (std::ostream& out, const std::vector<T>& v) {
  const int n = static_cast<int>(v.size());
  for (int i = 0; i < n; i++) {
    if (i > 0) out << ' ';
    out << v[i];
  }
  return out;
}

template<typename T_vector>
void print_vector_h(std::ostream& out, const T_vector& v, const bool& new_line = false) {
  const int n = static_cast<int>(v.size());
  for (int i = 0; i < n; i++) {
    if (i > 0) out << ' ';
    out << v[i];
  }
  if (new_line) out << '\n';
}

template<typename T_vector>
void print_vector_v(std::ostream& out, const T_vector& v, const bool& new_line = false) {
  const int n = static_cast<int>(v.size());
  for (int i = 0; i < n; i++) {
    out << v[i] << '\n';
  }
  if (new_line) out << '\n';
}

template<typename U, typename V>
void print_pretty_pair(std::ostream& out, const std::pair<U, V>& p, const bool& new_line = false) {
  out << '{' << p.first << ", " << p.second << '}';
  if (new_line) out << '\n';
}

#define _size(a) (int) (a).size()

using namespace std;

class CYarikAndArray {
public:
  void solveOne() {
    int n;
    in >> n;
    vector<int> a(n);
    in >> a;
    int result = a[0], total = a[0];
    for (int i = 1; i < n; i++) {
      if (abs(a[i]) % 2 == abs(a[i - 1]) % 2) {
        total = 0;
      }
      total = max(a[i], total + a[i]);
      result = max(result, total);
    }
    out << result << '\n';
  }

  void solve() {
    int nt;
    in >> nt;
    for (int _ = 0; _ < nt; _++) {
      solveOne();
    }
  }

  CYarikAndArray(istream& in, ostream& out)
    : in(in), out(out) { }

private:
  istream& in;
  ostream& out;
};

int main() {
  ios::sync_with_stdio(false);
  cin.tie(nullptr);
  CYarikAndArray solver(cin, cout);
  solver.solve();
  return 0;
}
